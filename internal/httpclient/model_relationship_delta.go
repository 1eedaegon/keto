/*
 * Ory Keto API
 *
 * Documentation for all of Ory Keto's REST APIs. gRPC is documented separately.
 *
 * API version: 1.0.0
 * Contact: hi@ory.sh
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// RelationshipDelta Write-delta for a TransactRelationTuplesRequest.
type RelationshipDelta struct {
	Action        *RelationshipDeltaAction `json:"action,omitempty"`
	RelationTuple *Relationship            `json:"relation_tuple,omitempty"`
}

// NewRelationshipDelta instantiates a new RelationshipDelta object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRelationshipDelta() *RelationshipDelta {
	this := RelationshipDelta{}
	var action RelationshipDeltaAction = RELATIONSHIPDELTAACTION_ACTION_UNSPECIFIED
	this.Action = &action
	return &this
}

// NewRelationshipDeltaWithDefaults instantiates a new RelationshipDelta object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRelationshipDeltaWithDefaults() *RelationshipDelta {
	this := RelationshipDelta{}
	var action RelationshipDeltaAction = RELATIONSHIPDELTAACTION_ACTION_UNSPECIFIED
	this.Action = &action
	return &this
}

// GetAction returns the Action field value if set, zero value otherwise.
func (o *RelationshipDelta) GetAction() RelationshipDeltaAction {
	if o == nil || o.Action == nil {
		var ret RelationshipDeltaAction
		return ret
	}
	return *o.Action
}

// GetActionOk returns a tuple with the Action field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RelationshipDelta) GetActionOk() (*RelationshipDeltaAction, bool) {
	if o == nil || o.Action == nil {
		return nil, false
	}
	return o.Action, true
}

// HasAction returns a boolean if a field has been set.
func (o *RelationshipDelta) HasAction() bool {
	if o != nil && o.Action != nil {
		return true
	}

	return false
}

// SetAction gets a reference to the given RelationshipDeltaAction and assigns it to the Action field.
func (o *RelationshipDelta) SetAction(v RelationshipDeltaAction) {
	o.Action = &v
}

// GetRelationTuple returns the RelationTuple field value if set, zero value otherwise.
func (o *RelationshipDelta) GetRelationTuple() Relationship {
	if o == nil || o.RelationTuple == nil {
		var ret Relationship
		return ret
	}
	return *o.RelationTuple
}

// GetRelationTupleOk returns a tuple with the RelationTuple field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RelationshipDelta) GetRelationTupleOk() (*Relationship, bool) {
	if o == nil || o.RelationTuple == nil {
		return nil, false
	}
	return o.RelationTuple, true
}

// HasRelationTuple returns a boolean if a field has been set.
func (o *RelationshipDelta) HasRelationTuple() bool {
	if o != nil && o.RelationTuple != nil {
		return true
	}

	return false
}

// SetRelationTuple gets a reference to the given Relationship and assigns it to the RelationTuple field.
func (o *RelationshipDelta) SetRelationTuple(v Relationship) {
	o.RelationTuple = &v
}

func (o RelationshipDelta) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Action != nil {
		toSerialize["action"] = o.Action
	}
	if o.RelationTuple != nil {
		toSerialize["relation_tuple"] = o.RelationTuple
	}
	return json.Marshal(toSerialize)
}

type NullableRelationshipDelta struct {
	value *RelationshipDelta
	isSet bool
}

func (v NullableRelationshipDelta) Get() *RelationshipDelta {
	return v.value
}

func (v *NullableRelationshipDelta) Set(val *RelationshipDelta) {
	v.value = val
	v.isSet = true
}

func (v NullableRelationshipDelta) IsSet() bool {
	return v.isSet
}

func (v *NullableRelationshipDelta) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRelationshipDelta(val *RelationshipDelta) *NullableRelationshipDelta {
	return &NullableRelationshipDelta{value: val, isSet: true}
}

func (v NullableRelationshipDelta) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRelationshipDelta) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
